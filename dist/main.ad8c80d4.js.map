{"version":3,"sources":["lib/Snake.js","lib/Food.js","lib/Game.js","main.js"],"names":["Snake","coords","x","y","fillColor","borderColor","vx","vy","direction","game","newHead","unshift","isCollision","food","handleEatFood","snake","pop","keyCode","keyPressed","Food","color","canvasSize","Math","floor","random","rand","getRandomCoords","filter","coord","length","getRandomAndUnusedCoords","console","log","Game","canvas","options","gameOver","score","context","getContext","settings","bgColor","speed","scoreElem","clearCanvas","drawSnake","drawFood","updateDOMScore","resetCoords","randomlySetFood","width","gameLoop","startGame","changeDirection","self","setTimeout","advance","e","fillStyle","strokestyle","fillRect","height","strokeRect","forEach","snakePart","snakeHead","headlessSnake","shift","undefined","document","getElementById","textContent","window","addEventListener","handleKeyPress"],"mappings":"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","file":"main.ad8c80d4.js","sourceRoot":"../src","sourcesContent":["export class Snake {\n\tconstructor() {\n\t\tthis.coords = [\n\t\t\t{x: 150, y: 150},\n\t\t\t{x: 140, y: 150},\n\t\t\t{x: 130, y: 150},\n\t\t\t{x: 120, y: 150},\n\t\t\t{x: 110, y: 150}\n\t\t];\n\t\tthis.fillColor = 'lightgreen';\n\t\tthis.borderColor = 'darkgreen';\n\t\tthis.vx = 10;\n\t\tthis.vy = 0;\n\t\tthis.direction = 'RIGHT';\n\t}\n\n\tresetCoords() {\n\t\tthis.coords = [\n\t\t\t{x: 150, y: 150},\n\t\t\t{x: 140, y: 150},\n\t\t\t{x: 130, y: 150},\n\t\t\t{x: 120, y: 150},\n\t\t\t{x: 110, y: 150}\n\t\t];\n\t\tthis.vx = 10;\n\t\tthis.vy = 0;\n\t\tthis.direction = 'RIGHT';\n\t}\n\n\tadvance(game) {\n\t\tconst newHead = {x: this.coords[0].x + this.vx, y: this.coords[0].y + this.vy};\n\t\tthis.coords.unshift(newHead);\n\n\t\tif (!game.isCollision()) {\n\t\t\tif (newHead.x === game.food.coords.x && newHead.y === game.food.coords.y) {\n\t\t\t\tgame.handleEatFood();\n\t\t\t} else {\n\t\t\t\tgame.snake.coords.pop();\n\t\t\t}\n\t\t} else {\n\t\t\tthrow (\"Collision...\");\n\t\t}\n\t}\n\n\tchangeDirection(keyCode) {\n\t\tconst keyPressed = keyCode;\n\t\tconst LEFT_KEY = 37;\n\t\tconst RIGHT_KEY = 39;\n\t\tconst UP_KEY = 38;\n\t\tconst DOWN_KEY = 40;\n\n\t\tif (keyPressed === LEFT_KEY && this.direction !== 'RIGHT') {\n\t\t\tthis.vx = -10;\n\t\t\tthis.vy = 0;\n\t\t\tthis.direction = 'LEFT';\n\t\t}\n\t\tif (keyPressed === UP_KEY && this.direction !== 'DOWN') {\n\t\t\tthis.vx = 0;\n\t\t\tthis.vy = -10;\n\t\t\tthis.direction = 'UP';\n\t\t}\n\t\tif (keyPressed === RIGHT_KEY && this.direction !== 'LEFT') {\n\t\t\tthis.vx = 10;\n\t\t\tthis.vy = 0;\n\t\t\tthis.direction = 'RIGHT';\n\t\t}\n\t\tif (keyPressed === DOWN_KEY && this.direction !== 'UP') {\n\t\t\tthis.vx = 0;\n\t\t\tthis.vy = 10;\n\t\t\tthis.direction = 'DOWN';\n\t\t}\n\t}\n}","export class Food {\n\tconstructor() {\n\t\tthis.coords = {\n\t\t\tx: 50,\n\t\t\ty: 50\n\t\t};\n\t\tthis.color = 'red';\n\t}\n\n\tgetRandomCoords(canvasSize) {\n\t\treturn [Math.floor(Math.random() * canvasSize/10) * 10, Math.floor(Math.random() * canvasSize/10) * 10];\n\t}\n\n\tgetRandomAndUnusedCoords(canvasSize, snake) {\n\t\tlet rand = this.getRandomCoords(canvasSize);\n\n\t\twhile (snake.coords.filter(coord => coord.x === rand[0] && coord.y === rand[1]).length) {\n\t\t\trand = this.getRandomCoords();\n\t\t}\n\t\treturn rand;\n\t}\n\n\trandomlySetFood(canvasSize, snake) {\n\t\tlet coords = this.getRandomAndUnusedCoords(canvasSize, snake);\n\t\tconsole.log(coords);\n\t\tthis.coords.x = coords[0];\n\t\tthis.coords.y = coords[1];\n\t}\n}","export class Game {\n\tconstructor(snake, food, canvas, options = {}) {\n\t\tthis.snake = snake;\n\t\tthis.food = food;\n\t\tthis.canvas = canvas;\n\t\tthis.gameOver = true;\n\t\tthis.score = 0;\n\t\tthis.context = canvas.getContext(\"2d\");\n\t\tthis.settings = {\n\t\t\tbgColor: 'white',\n\t\t\tborderColor: 'black',\n\t\t\tspeed: 40,\n\t\t\tscoreElem: options.scoreElem\n\t\t}\n\t}\n\n\tpreviewGame() {\n\t\tthis.clearCanvas();\n\t\tthis.drawSnake();\n\t\tthis.drawFood();\n\t}\n\n\tstartGame() {\n\t\tthis.gameOver = false;\n\t\tthis.score = 0;\n\t\tthis.updateDOMScore();\n\t\tthis.snake.resetCoords();\n\t\tthis.food.randomlySetFood(this.canvas.width, this.snake);\n\t\tthis.gameLoop();\n\t}\n\t\n\thandleKeyPress(keyCode) {\n\t\tif (this.gameOver) {\n\t\t\tthis.startGame();\n\t\t} else {\n\t\t\tthis.snake.changeDirection(keyCode);\n\t\t}\n\t}\n\n\tgameLoop() {\n\t\tconst self = this;\n\t\tsetTimeout(function() {\n\t\t\tself.clearCanvas();\n\t\t\ttry {\n\t\t\t\tself.snake.advance(self);\n\t\t\t} catch(e) {\n\t\t\t\tself.drawSnake();\n\t\t\t\tself.gameOver = true;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tself.drawSnake();\n\t\t\tself.drawFood();\n\t\t\tself.gameLoop();\n\t\t}, self.settings.speed);\n\t}\n\n\tclearCanvas() {\n\t\tthis.context.fillStyle = this.settings.bgColor;\n\t\tthis.context.strokestyle = this.settings.borderColor;\n\t\tthis.context.fillRect(0, 0, this.canvas.width, this.canvas.height);\n\t\tthis.context.strokeRect(0, 0, this.canvas.width, this.canvas.height);\n\t}\n\n\tdrawSnake() {\n\t\tconst self = this;\n\t\tthis.snake.coords.forEach(function(snakePart) {\n\t\t\tself.context.fillStyle = self.snake.fillColor;\n\t\t\tself.context.strokestyle = self.snake.borderColor;\n\t\t\tself.context.fillRect(snakePart.x, snakePart.y, 10, 10);\n\t\t\tself.context.strokeRect(snakePart.x, snakePart.y, 10, 10);\n\t\t});\n\t}\n\n\tdrawFood() {\n\t\tthis.context.fillStyle = this.food.color;\n\t\tthis.context.fillRect(this.food.coords.x, this.food.coords.y, 10, 10);\n\t}\n\n\tisCollision() {\n\t\tconst snakeHead = this.snake.coords[0];\n\t\tif (snakeHead.x < 0 || snakeHead.x >= this.canvas.width) return true;\n\t\telse if (snakeHead.y < 0 || snakeHead.y >= this.canvas.height) return true;\n\t\tlet headlessSnake = [...this.snake.coords];\n\t\theadlessSnake.shift();\n\t\tif (headlessSnake.filter(coords => coords.x === snakeHead.x && coords.y === snakeHead.y).length) return true;\n\t\treturn false;\n\t}\n\n\thandleEatFood() {\n\t\tthis.score++;\n\t\tthis.updateDOMScore();\n\t\tthis.food.randomlySetFood(this.canvas.width, this.snake);\n\t}\n\n\tupdateDOMScore() {\n\t\tconsole.log(this.settings.scoreElem);\n\t\tif (this.settings.scoreElem !== undefined) {\n\t\t\tconst scoreElem = document.getElementById(this.settings.scoreElem);\n\t\t\tscoreElem.textContent = this.score;\n\t\t}\n\t}\n}","import {Snake} from './lib/Snake.js';\nimport {Food} from './lib/Food.js';\nimport {Game} from './lib/Game.js';\n\n\nconst food = new Food();\nconst snake = new Snake();\n\nwindow.addEventListener('load', function () {\n\tconst canvas = document.getElementById(\"game-canvas\");\n\tconst options = {\n\t\tscoreElem: 'score'\n\t};\n\tconst game = new Game(snake, food, canvas, options);\n\tgame.clearCanvas();\n\tdocument.addEventListener(\"keydown\", function(e) {\n\t\tgame.handleKeyPress(e.keyCode);\n\t});\n});"]}